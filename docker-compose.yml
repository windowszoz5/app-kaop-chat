version: '3'
networks:
  mogu:
    external: false
services:
  # 容器名称
  drone-server:
    container_name: drone1
    # 构建所使用的镜像
    image: drone/drone
    # 映射容器内80端口到宿主机的30493端口30493端口,若修改的话，那么上面Gitee上也需要进行修改
    ports:
      - 30493:80
    # 映射容器内/data目录到宿主机的目录
    volumes:
      - /usr/local/bin/drone:/data
    # 容器随docker自动启动
    restart: always
    privileged: true
    networks:
      - mogu
    environment:
      # GITHUB 服务器地址如果github就把GITHUB改成GITHUB和https://GITHUB.com改成https://github.com
      - DRONE_GITHUB_SERVER=https://github.com
      # GITHUB OAuth2客户端ID
      # - DRONE_GITEA_CLI（上面的Client ID值）
      - DRONE_GITHUB_CLIENT_ID=4795b50aecb0b0c284c7
      # GITHUB OAuth2客户端密钥（上面的Client Secret值）
      - DRONE_GITHUB_CLIENT_SECRET=7570db57cd5ca5ea1055fd325ba39ea20b9de809
      # drone的共享密钥（生成rpc密钥）
      - DRONE_RPC_SECRET=6300995e7bef05cd704fdb9b7117568c
      # drone的主机名(改成自己的域名获得ip+端口(注意是drome的))
      - DRONE_SERVER_HOST=43.136.39.33:30493
      # 外部协议方案根据你的域名判断是http还是https(ip加端口是http)
      - DRONE_SERVER_PROTO=http
      - DRONE_GIT_ALWAYS_AUTH=false
      # 创建管理员账户，这里对应为GITHUB的用户名(也就是登录的账号,不是昵称)(填错了回导致自动化部署失败)
      - DRONE_USER_CREATE=username:windowszoz5,admin:true

  runner:
    image: drone/drone-runner-docker:latest # 目前drone-runner-docker最新版本为 1.8.0
    container_name: drone_runner
    restart: always
    networks:
      - mogu # 加入到drone网络
    environment:
      - DRONE_RUNNER_NAME=docker-runner
      - DRONE_RUNNER_CAPACITY=10 # 限制runner可执行的并发管道数量
      - DRONE_RPC_PROTO=http # 访问drone server 协议
      - DRONE_RPC_HOST=43.136.39.33:30493 # 访问drone server 服务器地址
      - DRONE_RPC_SECRET=6300995e7bef05cd704fdb9b7117568c # 与 drone server 通讯的密钥
      - DRONE_UI_DISABLE=true
      # - DRONE_RUNNER_NETWORKS=drone_net
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    depends_on:
      - drone-server